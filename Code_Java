import java.util.*;

public class SeratOptik {
    static class kota {
        String NamaKota;
        List<int[]> alamat;

        kota(String NamaKota, List<int[]> alamat) {
            this.NamaKota = NamaKota;
            this.alamat = alamat;
        }
    }

    static class Edge implements Comparable<Edge> {
        String kota1, kota2;
        double weight;

        Edge(String kota1, String kota2, double weight) {
            this.kota1 = kota1;
            this.kota2 = kota2;
            this.weight = weight;
        }

        public int compareTo(Edge other) {
            return Double.compare(this.weight, other.weight);
        }
    }

    public static double Pengukuran(int[] alamat1, int[] alamat2) {
        return Math.sqrt(Math.pow(alamat1[0] - alamat2[0], 2) + Math.pow(alamat1[1] - alamat2[1], 2));
    }

    public static double MinimumJaringan(int N, List<kota> kotaPusat, List<String[]> Penghubung) {
        List<Edge> edges = new ArrayList<>();
        Hashtable<String, List<int[]>> AlamatKota = new Hashtable<>();

        for (kota daerah : kotaPusat) {
            AlamatKota.put(daerah.NamaKota, daerah.alamat);
        }

        for (String[] hubungan : Penghubung) {
            String kota1 = hubungan[0];
            String kota2 = hubungan[1];
            List<int[]> tempat1 = AlamatKota.get(kota1);
            List<int[]> tempat2 = AlamatKota.get(kota2);

            for (int[] loc1 : tempat1) {
                for (int[] loc2 : tempat2) {
                    double jarak = Pengukuran(loc1, loc2);
                    edges.add(new Edge(kota1, kota2, jarak));
                }
            }
        }

        Collections.sort(edges);

        Hashtable<String, String> data = new Hashtable<>();
        for (kota city : kotaPusat) {
            data.put(city.NamaKota, city.NamaKota);
        }

        double totalWeight = 0;
        int count = 0;

        for (Edge edge : edges) {
            if (cabang(data, edge.kota1, edge.kota2)) {
                totalWeight += edge.weight;
                if (++count == N - 1) break;
            }
        }

        return totalWeight;
    }

private static String cari(Hashtable<String, String> data, String kota) {
        if (!kota.equals(data.get(kota))) {
            data.put(kota, cari(data, data.get(kota)));
        }
        return data.get(kota);
    }

    private static boolean cabang(Hashtable<String, String> data, String kota1, String kota2) {
        String root1 = cari(data, kota1);
        String root2 = cari(data, kota2);
        if (!root1.equals(root2)) {
            data.put(root1, root2);
            return true;
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Double> results = new ArrayList<>();

        while (true) {   
            int N = scanner.nextInt();
            if (N == 0) break;

            List<kota> kotaPusat = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                String NamaKota = scanner.next();
                
                if (!NamaKota.matches("[A-Z]+")) {
                    System.out.println("Nama kota harus berupa huruf kapital.");
                    return;
                }
                if (NamaKota.length() > 15) {
                    System.out.println("Nama kota tidak boleh lebih dari 15 karakter.");
                    return;
                }
                
                int C = scanner.nextInt();
                if (C < 1 || C > 50) {
                    return;
                }

                List<int[]> alamat = new ArrayList<>();
                for (int j = 0; j < C; j++) {
                    int x = scanner.nextInt();
                    int y = scanner.nextInt();
                    alamat.add(new int[]{x, y});
                }
                kotaPusat.add(new kota(NamaKota, alamat));
            }

            List<String[]> Penghubung = new ArrayList<>();
            for (int i = 0; i < N - 1; i++) {
                String kota1;
                String kota2;
                kota1 = scanner.next();
                kota2 = scanner.next();
                Penghubung.add(new String[]{kota1, kota2});
            }

            double result = MinimumJaringan(N, kotaPusat, Penghubung);
            results.add(result);
        }
        scanner.close();
        for (double result : results) {
            System.out.printf("%.1f\n", result);
        }
    }
}
